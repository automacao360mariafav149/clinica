-- Descri√ß√£o: Corre√ß√£o de recurs√£o infinita nas pol√≠ticas RLS da tabela profiles
-- Data: 2025-10-24
-- Autor: Sistema MedX - Corre√ß√£o de Seguran√ßa
-- Contexto: As pol√≠ticas RLS criadas anteriormente causavam erro de recurs√£o infinita
--           durante o login porque faziam subquery na pr√≥pria tabela profiles.
--           Esta migration implementa uma solu√ß√£o usando fun√ß√£o auxiliar SECURITY DEFINER.

-- ====================================================================================
-- PROBLEMA IDENTIFICADO
-- ====================================================================================

-- Erro: "infinite recursion detected in policy for relation 'profiles'"
-- 
-- Causa: As pol√≠ticas faziam subquery na tabela profiles para verificar role:
--   EXISTS (SELECT 1 FROM profiles WHERE auth_user_id = auth.uid() AND role = 'owner')
--
-- Quando o usu√°rio tenta fazer login:
--   1. Sistema tenta SELECT na tabela profiles
--   2. Pol√≠tica RLS verifica se usu√°rio tem perfil (SELECT profiles)
--   3. Sistema tenta SELECT na tabela profiles (LOOP!)
--   4. ‚ùå ERROR: infinite recursion

-- ====================================================================================
-- ETAPA 1: REMOVER POL√çTICAS COM RECURS√ÉO
-- ====================================================================================

DROP POLICY IF EXISTS "authenticated_users_can_view_all_profiles" ON profiles;
DROP POLICY IF EXISTS "owners_can_insert_profiles" ON profiles;
DROP POLICY IF EXISTS "users_can_update_own_profile_or_owner_all" ON profiles;
DROP POLICY IF EXISTS "only_owners_can_delete_profiles" ON profiles;
DROP POLICY IF EXISTS "Users can read own profile" ON profiles;

-- ====================================================================================
-- ETAPA 2: CRIAR FUN√á√ÉO AUXILIAR SEM RECURS√ÉO
-- ====================================================================================

-- Esta fun√ß√£o usa SECURITY DEFINER para executar com privil√©gios do criador,
-- efetivamente bypassando as pol√≠ticas RLS e evitando recurs√£o
CREATE OR REPLACE FUNCTION get_user_role()
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER  -- ‚ö†Ô∏è Executa com privil√©gios do criador, bypassa RLS
SET search_path = public
STABLE  -- Resultado n√£o muda durante uma transa√ß√£o
AS $$
DECLARE
  user_role TEXT;
BEGIN
  -- Busca role do usu√°rio atual sem acionar pol√≠ticas RLS
  SELECT role INTO user_role
  FROM profiles
  WHERE auth_user_id = auth.uid()
  LIMIT 1;
  
  -- Retorna a role ou string vazia se n√£o encontrar
  RETURN COALESCE(user_role, '');
END;
$$;

-- Coment√°rio explicativo da fun√ß√£o
COMMENT ON FUNCTION get_user_role() IS 
  'Retorna a role do usu√°rio autenticado sem causar recurs√£o nas pol√≠ticas RLS. '
  'Usa SECURITY DEFINER para bypassar RLS internamente.';

-- ====================================================================================
-- ETAPA 3: CRIAR POL√çTICAS RLS SEM RECURS√ÉO
-- ====================================================================================

-- POL√çTICA SELECT: Usu√°rios autenticados podem ver todos os perfis
-- Sem recurs√£o - usa USING (true) porque todos precisam ver perfis
CREATE POLICY "select_profiles_authenticated" ON profiles
  FOR SELECT
  TO authenticated
  USING (true);

COMMENT ON POLICY "select_profiles_authenticated" ON profiles IS
  'Permite todos os usu√°rios autenticados visualizarem perfis. '
  'Necess√°rio para listagens de m√©dicos, secret√°rias, etc.';

-- POL√çTICA INSERT: Apenas owners podem criar novos perfis
-- Usa fun√ß√£o auxiliar que n√£o causa recurs√£o
CREATE POLICY "insert_profiles_owner_only" ON profiles
  FOR INSERT
  TO authenticated
  WITH CHECK (get_user_role() = 'owner');

COMMENT ON POLICY "insert_profiles_owner_only" ON profiles IS
  'Apenas usu√°rios com role owner podem criar novos perfis. '
  'Usa fun√ß√£o auxiliar get_user_role() para evitar recurs√£o.';

-- POL√çTICA UPDATE: Usu√°rios podem atualizar pr√≥prio perfil, owners podem atualizar todos
-- Combina verifica√ß√£o direta (auth_user_id) com fun√ß√£o auxiliar
CREATE POLICY "update_profiles_own_or_owner" ON profiles
  FOR UPDATE
  TO authenticated
  USING (
    auth_user_id = auth.uid() OR  -- Pr√≥prio perfil (verifica√ß√£o direta)
    get_user_role() = 'owner'      -- Ou √© owner (fun√ß√£o auxiliar)
  )
  WITH CHECK (
    auth_user_id = auth.uid() OR
    get_user_role() = 'owner'
  );

COMMENT ON POLICY "update_profiles_own_or_owner" ON profiles IS
  'Usu√°rios podem atualizar seu pr√≥prio perfil. Owners podem atualizar qualquer perfil. '
  'Usa verifica√ß√£o direta (auth_user_id) primeiro, depois fun√ß√£o auxiliar para owners.';

-- POL√çTICA DELETE: Apenas owners podem deletar perfis
-- Prote√ß√£o cr√≠tica usando fun√ß√£o auxiliar
CREATE POLICY "delete_profiles_owner_only" ON profiles
  FOR DELETE
  TO authenticated
  USING (get_user_role() = 'owner');

COMMENT ON POLICY "delete_profiles_owner_only" ON profiles IS
  '‚ö†Ô∏è POL√çTICA CR√çTICA: Apenas owners podem deletar perfis. '
  'Usa fun√ß√£o auxiliar get_user_role() para evitar recurs√£o.';

-- ====================================================================================
-- VALIDA√á√ÉO
-- ====================================================================================

-- Verificar que todas as pol√≠ticas foram criadas corretamente
DO $$
DECLARE
  policy_count INTEGER;
BEGIN
  SELECT COUNT(*) INTO policy_count 
  FROM pg_policies 
  WHERE schemaname = 'public' AND tablename = 'profiles';
  
  IF policy_count != 4 THEN
    RAISE EXCEPTION 'Esperado 4 pol√≠ticas, encontrado %', policy_count;
  END IF;
  
  RAISE NOTICE '‚úÖ Todas as 4 pol√≠ticas RLS foram criadas com sucesso';
END $$;

-- Testar fun√ß√£o auxiliar
DO $$
DECLARE
  test_result TEXT;
BEGIN
  SELECT get_user_role() INTO test_result;
  RAISE NOTICE '‚úÖ Fun√ß√£o get_user_role() est√° funcionando (retornou: %)', 
    COALESCE(test_result, 'NULL');
END $$;

-- ====================================================================================
-- RESUMO DA SOLU√á√ÉO
-- ====================================================================================

-- ‚ùå PROBLEMA:
--    Pol√≠ticas RLS faziam subquery na pr√≥pria tabela profiles -> recurs√£o infinita
--
-- ‚úÖ SOLU√á√ÉO:
--    1. Fun√ß√£o auxiliar get_user_role() com SECURITY DEFINER bypassa RLS
--    2. SELECT usa USING (true) - sem verifica√ß√£o complexa
--    3. INSERT/DELETE usam fun√ß√£o auxiliar para verificar role
--    4. UPDATE combina verifica√ß√£o direta com fun√ß√£o auxiliar
--
-- üîí SEGURAN√áA MANTIDA:
--    - SELECT: Todos autenticados podem ver (necess√°rio para o sistema)
--    - INSERT: Apenas owners podem criar
--    - UPDATE: Pr√≥prio perfil ou owner
--    - DELETE: Apenas owners (prote√ß√£o cr√≠tica)
--
-- ‚ö° PERFORMANCE:
--    - SECURITY DEFINER bypassa RLS internamente (r√°pido)
--    - STABLE garante cache do resultado durante transa√ß√£o
--    - Verifica√ß√£o direta de auth_user_id evita fun√ß√£o quando poss√≠vel

-- ====================================================================================
-- TESTES SUGERIDOS
-- ====================================================================================

-- Ap√≥s aplicar esta migration, testar:
-- 1. ‚úÖ Login de usu√°rio owner
-- 2. ‚úÖ Login de usu√°rio doctor
-- 3. ‚úÖ Login de usu√°rio secretary
-- 4. ‚úÖ Listagem de perfis no sistema
-- 5. ‚úÖ Edi√ß√£o do pr√≥prio perfil
-- 6. ‚úÖ Owner editando perfil de outro usu√°rio
-- 7. ‚ùå N√£o-owner tentando deletar perfil (deve falhar)
-- 8. ‚ùå N√£o-owner tentando criar perfil (deve falhar)


