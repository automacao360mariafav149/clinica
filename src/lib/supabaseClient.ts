import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string;

export const isSupabaseConfigured = Boolean(supabaseUrl && supabaseAnonKey);

if (!isSupabaseConfigured) {
  // Evita falhas silenciosas em tempo de dev
  console.warn(
    'Vari√°veis VITE_SUPABASE_URL e/ou VITE_SUPABASE_ANON_KEY n√£o configuradas. Verifique seu .env.local.'
  );
}

// üî• Rate limiter para evitar spam de requisi√ß√µes
export const rateLimiter = {
  lastCall: {} as Record<string, number>,
  
  /**
   * Verifica se uma chamada pode ser feita baseado no intervalo m√≠nimo
   * @param key Identificador √∫nico da opera√ß√£o (ex: 'profiles', 'auth')
   * @param minInterval Intervalo m√≠nimo em ms entre chamadas (padr√£o: 500ms)
   * @returns true se pode fazer a chamada, false se deve esperar
   */
  canCall(key: string, minInterval = 500): boolean {
    const now = Date.now();
    const lastCall = this.lastCall[key] || 0;
    
    if (now - lastCall < minInterval) {
      console.log(`[RateLimit] üö´ Bloqueando chamada: ${key} (aguardar ${minInterval - (now - lastCall)}ms)`);
      return false;
    }
    
    this.lastCall[key] = now;
    return true;
  },
  
  /**
   * Reseta o rate limiter para uma chave espec√≠fica
   */
  reset(key: string): void {
    delete this.lastCall[key];
    console.log(`[RateLimit] üîÑ Rate limiter resetado para: ${key}`);
  },
  
  /**
   * Reseta todos os rate limiters
   */
  resetAll(): void {
    this.lastCall = {};
    console.log('[RateLimit] üîÑ Todos os rate limiters resetados');
  }
};

// Configura√ß√£o do Supabase com localStorage (padr√£o)
// Persiste a sess√£o entre reloads e abas, mas com melhor gerenciamento de cache
export const supabase = createClient(supabaseUrl ?? '', supabaseAnonKey ?? '', {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    // Usa localStorage padr√£o do Supabase para persistir sess√£o
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
  },
  global: {
    // Intercepta todas as chamadas fetch para aplicar rate limiting
    fetch: (url, options = {}) => {
      const urlString = url.toString();
      
      // üî• CR√çTICO: N√ÉO aplicar rate limit durante opera√ß√µes de autentica√ß√£o
      // Verifica se √© uma opera√ß√£o de auth ou token refresh
      if (urlString.includes('/auth/v1/token') || 
          urlString.includes('/auth/v1/user') ||
          urlString.includes('grant_type=password')) {
        console.log('[RateLimit] ‚úÖ Permitindo opera√ß√£o de autentica√ß√£o (sem rate limit)');
        return fetch(url, options);
      }
      
      // üî• TEMPORARIAMENTE DESABILITADO - Para debug de login
      // Rate limit para profiles DESABILITADO durante testes
      if (urlString.includes('/profiles')) {
        console.log('[RateLimit] ‚ö†Ô∏è DEBUG MODE: Rate limit DESABILITADO para profiles');
        return fetch(url, options);
      }
      
      return fetch(url, options);
    },
  },
});

export async function testConnection() {
  const { data, error } = await supabase
    .from('teste_mcp')
    .select('*')
    .limit(1);

  return { data, error };
}



