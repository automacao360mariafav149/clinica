import { getSystemSetting } from '@/hooks/useSystemSettings';

/**
 * Interface para o resultado da an√°lise do Gemini
 */
export interface GeminiExamAnalysis {
  output: string; // Conte√∫do completo em Markdown
  analise?: string;
  valores_encontrados?: string[];
  valores_alterados?: string[];
  interpretacao?: string;
  recomendacoes?: string[];
  observacoes?: string;
}

/**
 * Tipos de arquivo suportados
 */
export type SupportedFileType = 'application/pdf' | 'image/png' | 'image/jpeg' | 'image/jpg' | 'image/webp';

/**
 * Mapeamento de tipos MIME para tipos do Gemini
 */
const MIME_TYPE_MAP: Record<string, string> = {
  'application/pdf': 'application/pdf',
  'image/png': 'image/png',
  'image/jpeg': 'image/jpeg',
  'image/jpg': 'image/jpeg',
  'image/webp': 'image/webp',
};

/**
 * Converte um arquivo para base64
 */
async function fileToBase64(file: File): Promise<string> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result as string;
      // Remove o prefixo "data:mime/type;base64,"
      const base64 = result.split(',')[1];
      resolve(base64);
    };
    reader.onerror = (error) => reject(error);
  });
}

/**
 * Analisa um exame (PDF ou imagem) usando o Gemini Flash
 * 
 * @param file - Arquivo do exame (PDF ou imagem)
 * @returns An√°lise detalhada do exame
 * 
 * @example
 * const file = document.getElementById('input').files[0];
 * const analysis = await analyzeExamWithGemini(file);
 * console.log(analysis.output);
 */
export async function analyzeExamWithGemini(file: File): Promise<GeminiExamAnalysis> {
  try {
    console.log('üîç Iniciando an√°lise com Gemini Flash...');
    console.log('üìÑ Arquivo:', file.name, 'Tipo:', file.type, 'Tamanho:', file.size);

    // 1. Validar tipo de arquivo
    if (!MIME_TYPE_MAP[file.type]) {
      throw new Error(`Tipo de arquivo n√£o suportado: ${file.type}. Suportados: PDF, PNG, JPEG, JPG, WEBP`);
    }

    // 2. Buscar configura√ß√µes do Gemini do system_settings
    console.log('üîë Buscando configura√ß√µes do Gemini...');
    const geminiApiKey = await getSystemSetting('gemini_api_key');
    const preferredModel = await getSystemSetting('gemini_model');
    
    if (!geminiApiKey) {
      throw new Error('API key do Gemini n√£o configurada. Configure em system_settings com a chave "gemini_api_key"');
    }
    
    if (preferredModel) {
      console.log(`üéØ Modelo preferido configurado: ${preferredModel}`);
    }

    // 3. Converter arquivo para base64
    console.log('üì¶ Convertendo arquivo para base64...');
    const base64Data = await fileToBase64(file);
    console.log('‚úÖ Convers√£o conclu√≠da');

    // 4. Preparar o prompt para an√°lise de exames
    const prompt = `Voc√™ √© um assistente m√©dico especializado em an√°lise de exames laboratoriais e de imagem.

Analise o documento/imagem fornecido e retorne uma an√°lise detalhada em formato Markdown seguindo a estrutura abaixo:

## üìã An√°lise Geral
[Fa√ßa um resumo geral do que foi identificado no exame]

## üî¨ Valores Encontrados
[Liste todos os valores/par√¢metros encontrados com seus resultados]
- **Par√¢metro**: Valor - Status: [Normal/Alterado] - Significado: [breve explica√ß√£o]

## ‚ö†Ô∏è Valores Alterados
[Se houver valores fora da normalidade, liste-os aqui com √™nfase]
- **Par√¢metro Alterado**: Valor encontrado (Refer√™ncia: X-Y) - ‚ö†Ô∏è [Explica√ß√£o do significado cl√≠nico]

## üí° Interpreta√ß√£o Cl√≠nica
[Forne√ßa uma interpreta√ß√£o cl√≠nica dos resultados, considerando o conjunto dos achados]

## ‚úÖ Recomenda√ß√µes
[Sugira a√ß√µes, exames complementares ou observa√ß√µes importantes]
- [Recomenda√ß√£o 1]
- [Recomenda√ß√£o 2]

## üìù Observa√ß√µes
[Observa√ß√µes adicionais importantes, limita√ß√µes da an√°lise, ou avisos]

**IMPORTANTE:**
- Use emojis para facilitar a visualiza√ß√£o
- Destaque valores alterados com ‚ö†Ô∏è
- Use **negrito** para termos importantes
- Seja claro e objetivo
- Se n√£o conseguir identificar algum valor, mencione isso
- Esta an√°lise √© um aux√≠lio, n√£o substitui a avalia√ß√£o m√©dica completa

Analise agora o documento/imagem fornecido:`;

    // 5. Fazer requisi√ß√£o para o Gemini API
    console.log('üöÄ Enviando requisi√ß√£o para Gemini API...');
    
    const geminiMimeType = MIME_TYPE_MAP[file.type];
    
    // Lista de modelos para tentar (do mais recente ao mais antigo)
    let modelsToTry = [
      'gemini-2.0-flash',
      'gemini-2.0-flash-exp',
      'gemini-1.5-flash-latest',
      'gemini-1.5-flash-002',
      'gemini-1.5-flash',
      'gemini-1.5-pro-latest',
      'gemini-1.5-pro',
      'gemini-pro-vision',
      'gemini-pro',
    ];
    
    // Se houver modelo preferido configurado, tentar ele primeiro
    if (preferredModel && !modelsToTry.includes(preferredModel)) {
      console.log(`‚ûï Adicionando modelo preferido ao in√≠cio da lista: ${preferredModel}`);
      modelsToTry = [preferredModel, ...modelsToTry];
    } else if (preferredModel) {
      // Se j√° est√° na lista, mover para o in√≠cio
      modelsToTry = [preferredModel, ...modelsToTry.filter(m => m !== preferredModel)];
    }
    
    let response: Response | null = null;
    let lastError: Error | null = null;
    
    // Tentar cada modelo at√© encontrar um que funcione
    for (const modelName of modelsToTry) {
      try {
        console.log(`üîÑ Tentando modelo: ${modelName}...`);
        
        response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${geminiApiKey}`,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              contents: [
                {
                  parts: [
                    {
                      text: prompt,
                    },
                    {
                      inline_data: {
                        mime_type: geminiMimeType,
                        data: base64Data,
                      },
                    },
                  ],
                },
              ],
              generationConfig: {
                temperature: 0.4,
                topK: 32,
                topP: 1,
                maxOutputTokens: 8192,
              },
            }),
          }
        );
        
        // Se a resposta for 200, sucesso!
        if (response.ok) {
          console.log(`‚úÖ Modelo ${modelName} funcionou!`);
          break;
        }
        
        // Se for 404, tentar pr√≥ximo modelo
        if (response.status === 404) {
          console.log(`‚ö†Ô∏è Modelo ${modelName} n√£o dispon√≠vel (404), tentando pr√≥ximo...`);
          continue;
        }
        
        // Outro erro, lan√ßar exce√ß√£o
        const errorData = await response.json().catch(() => null);
        throw new Error(`Erro ${response.status}: ${JSON.stringify(errorData)}`);
        
      } catch (error) {
        console.error(`‚ùå Erro ao tentar ${modelName}:`, error);
        lastError = error as Error;
        continue;
      }
    }

    // Verificar se conseguimos uma resposta v√°lida
    if (!response || !response.ok) {
      const errorMsg = lastError 
        ? `Nenhum modelo dispon√≠vel. √öltimo erro: ${lastError.message}` 
        : 'Nenhum modelo do Gemini est√° dispon√≠vel no momento';
      
      console.error('‚ùå Falha ao conectar com Gemini:', errorMsg);
      
      throw new Error(
        `${errorMsg}\n\nVerifique:\n` +
        `1. Sua API key est√° correta?\n` +
        `2. A API key tem permiss√µes para usar o Gemini?\n` +
        `3. Voc√™ est√° em uma regi√£o suportada?\n` +
        `4. Tente gerar uma nova API key em: https://makersuite.google.com/app/apikey`
      );
    }

    const data = await response.json();
    console.log('üì• Resposta recebida do Gemini');

    // 6. Extrair o texto da resposta
    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      console.error('‚ùå Resposta inv√°lida do Gemini:', data);
      throw new Error('Resposta inv√°lida da API do Gemini');
    }

    const generatedText = data.candidates[0].content.parts[0].text;
    
    if (!generatedText || generatedText.trim() === '') {
      throw new Error('O Gemini n√£o conseguiu gerar uma an√°lise para este arquivo');
    }

    console.log('‚úÖ An√°lise gerada com sucesso!');
    console.log('üìù Tamanho da resposta:', generatedText.length, 'caracteres');

    // 7. Retornar an√°lise no formato esperado
    const analysis: GeminiExamAnalysis = {
      output: generatedText,
    };

    return analysis;
  } catch (error) {
    console.error('‚ùå Erro ao analisar exame com Gemini:', error);
    
    if (error instanceof Error) {
      throw error;
    }
    
    throw new Error('Erro desconhecido ao analisar exame');
  }
}

/**
 * Valida se um tipo de arquivo √© suportado
 */
export function isSupportedFileType(fileType: string): fileType is SupportedFileType {
  return fileType in MIME_TYPE_MAP;
}

/**
 * Obt√©m a lista de extens√µes suportadas para exibi√ß√£o ao usu√°rio
 */
export function getSupportedFileExtensions(): string {
  return 'PDF, PNG, JPG, JPEG, WEBP';
}

/**
 * Obt√©m o accept para input de arquivo
 */
export function getFileInputAccept(): string {
  return 'application/pdf,image/png,image/jpeg,image/jpg,image/webp';
}

